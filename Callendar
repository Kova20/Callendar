from flask import Flask, render_template, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin, LoginManager, login_user, login_required, logout_user, current_user
from werkzeug.security import generate_password_hash, check_password_hash
import datetime

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///scheduler.db'
app.config['SECRET_KEY'] = 'your_secret_key'
db = SQLAlchemy(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# Models
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(150), nullable=False)

class Client(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(150), nullable=False)
    calendar_id = db.Column(db.Integer, db.ForeignKey('calendar.id'), nullable=False)

class Calendar(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    events = db.relationship('Event', backref='calendar', lazy=True)

class Event(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    description = db.Column(db.Text, nullable=True)
    start_time = db.Column(db.DateTime, nullable=False)
    end_time = db.Column(db.DateTime, nullable=False)
    calendar_id = db.Column(db.Integer, db.ForeignKey('calendar.id'), nullable=False)

# Login manager user loader
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# Routes
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()
        if user and check_password_hash(user.password, password):
            login_user(user)
            return jsonify({"message": "Logged in successfully."})
        return jsonify({"error": "Invalid username or password."})
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return jsonify({"message": "Logged out successfully."})

@app.route('/master_calendar')
@login_required
def master_calendar():
    events = Event.query.all()
    return jsonify([{
        "title": event.title,
        "description": event.description,
        "start_time": event.start_time,
        "end_time": event.end_time,
        "calendar_id": event.calendar_id
    } for event in events])

@app.route('/client_calendar/<int:client_id>')
@login_required
def client_calendar(client_id):
    client = Client.query.get_or_404(client_id)
    events = Event.query.filter_by(calendar_id=client.calendar_id).all()
    return jsonify([{
        "title": event.title,
        "description": event.description,
        "start_time": event.start_time,
        "end_time": event.end_time
    } for event in events])

@app.route('/add_event', methods=['POST'])
@login_required
def add_event():
    data = request.json
    event = Event(
        title=data['title'],
        description=data.get('description', ''),
        start_time=datetime.datetime.fromisoformat(data['start_time']),
        end_time=datetime.datetime.fromisoformat(data['end_time']),
        calendar_id=data['calendar_id']
    )
    db.session.add(event)
    db.session.commit()
    return jsonify({"message": "Event added successfully."})

@app.route('/clients')
@login_required
def clients():
    clients = Client.query.all()
    return jsonify([{
        "id": client.id,
        "name": client.name
    } for client in clients])

if __name__ == '__main__':
    db.create_all()
    app.run(debug=True)
